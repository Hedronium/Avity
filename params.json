{
  "name": "Avity",
  "tagline": "Highly Extensible and Customizable Identicon Generator",
  "body": "# Avity\r\n---\r\n![Logo](http://hedronium.github.io/Avity/images/varied_1.jpeg)  \r\n\r\nHighly Customizable Identicon Generator for PHP.\r\n\r\n\r\n# Installation  \r\nGet it through composer cli.\r\n\r\n```\r\ncomposer require hedronium/avity\r\n```\r\n\r\n\r\n# Getting Started\r\n```PHP\r\nuse Hedronium\\Avity\\Avity;\r\n\r\n$avity = Avity::init()->generate()->jpg()->toBrowser();\r\n```\r\n\r\nThats it thats all you really need to generate an Identicon.\r\nThe above code will generate an Identicon based on Random values.\r\n\r\n\r\n\r\n\r\n# Basic Customization\r\n\r\n## Customizing Image Dimensions\r\nYou can call the `height($value)` and `width($value)` method on the `Avity` instance\r\nafter initialization. Like:\r\n\r\n```PHP\r\n$avity = Avity::init();\r\n$avity->height(600)->width(500); // Long Vertical Identicon. WOW!\r\n\r\n$avity->generate()->jpg()->toBrowser();\r\n```\r\n\r\nYes, its a Fluent API, method chaining is cool!\r\n\r\n## Customizing Background & Foreground Color\r\n```PHP\r\n$avity = Avity::init();\r\n\r\n$avity->style()->background(20, 20, 40)\r\n->foreground(100, 240, 255);\r\n```\r\nBoth the methods accept `$r, $g, $b` parameters.\r\n\r\n![Dark](http://hedronium.github.io/Avity/images/dark.jpeg)  \r\n\r\n## Customizing the Grid\r\n```PHP\r\n$avity = Avity::init();\r\n\r\n$avity->rows(3)->columns(3); // 3x3 Grid\r\n```\r\n\r\n![3 by 3](http://hedronium.github.io/Avity/images/3_by_3.jpeg)  \r\n\r\n\r\n\r\n## Padding\r\n![Padding](http://hedronium.github.io/Avity/images/padded.jpeg)  \r\n\r\n```PHP\r\n$avity = Avity::init();\r\n\r\n$avity->padding(100); //100px padding\r\n```\r\n\r\n## Style Specific Customizations.\r\nOften the style class used has specific methods that customize its behaviour\r\nwhich are not directly available on the Avity object for such cases the style\r\ninstance can be fetched with the `style()` method on the `Avity` instance.\r\n\r\nLike:\r\n\r\n```PHP\r\n$avity = Avity::init();\r\n\r\n$avity->style()->variedColor()->spacing(10); // `spacing()` & `variedColor()` is a style specific method\r\n```\r\n\r\n![Varied Color](http://hedronium.github.io/Avity/images/varied_2.jpeg)\r\n![Varied Color](http://hedronium.github.io/Avity/images/varied_1.jpeg)\r\n\r\n# Controlling the Output\r\n## Output Format\r\nAvity can output as `jpg`, `png` or `gif`\r\n\r\n```PHP\r\nAvity::init()->generate()->jpg()->toBrowser();\r\nAvity::init()->generate()->png()->toBrowser();\r\nAvity::init()->generate()->gif()->toBrowser();\r\n```\r\n\r\n## Output Quality\r\nThe quality of the generated image may also be set. Give it a number between 1 and 100. (Only aplicable for `jpg` & `png`)\r\n\r\n```PHP\r\nAvity::init()->generate()->jpg()->quality(80)->toBrowser();\r\n```\r\n\r\n## Output To Browser\r\n```PHP\r\nAvity::init()->generate()->jpg()->toBrowser();\r\n```\r\n\r\n## Output To File\r\n```PHP\r\nAvity::init()->generate()->jpg()->toFile('/server/potato.jpg');\r\n```\r\n\r\n\r\n# Generators\r\n`Generators` are objects that generate numbers. These numbers are used by Layouts\r\nto set blocks onto the grid.\r\n\r\nTo use a different generator you can pass in an associative array\r\nof options with the `generator` key and the class bane as the value. Like:\r\n\r\n```PHP\r\n$avity = Avity::init([\r\n    'generator' => \\Hedronium\\Avity\\Generators\\Hash::class\r\n]);\r\n```\r\n\r\navailable classes:\r\n\r\n- `\\Hedronium\\Avity\\Generators\\Hash` (_default_)\r\n- `\\Hedronium\\Avity\\Generators\\Random`\r\n\r\n\r\n\r\n\r\n## The Hash Generator\r\nOnce you got the generator setup like above to pass in a value to hash you can call `hash()` on the `Avity` instance.\r\n(it can be anything, like the user's username or email address or id)\r\n\r\n```PHP\r\n$avity = Avity::init([\r\n    'generator' => \\Hedronium\\Avity\\Generators\\Hash::class\r\n]);\r\n\r\n$avity->hash('I like Bananas.'); // I really like bananas\r\n```\r\n\r\nThis will generate the same identicon each time you give it the same value to hash.\r\n\r\n\r\n# Layouts\r\n`Layout` objects use `Generator` objects to set blocks onto the grid.\r\nAvity comes with 3 built in `Layout` classes:\r\n\r\n- `\\Hedronium\\Avity\\Layouts\\VerticalMirror` (_default_)\r\n- `\\Hedronium\\Avity\\Layouts\\HorizontalMirror`\r\n- `\\Hedronium\\Avity\\Layouts\\DiagonalMirror`\r\n\r\n![Avity](http://hedronium.github.io/Avity/images/vertical_mirror.jpeg)\r\n![Avity](http://hedronium.github.io/Avity/images/horizontal_mirror.jpeg)\r\n\r\nchanging the layout class\r\n\r\n```PHP\r\n$avity = Avity::init([\r\n    'layout' => \\Hedronium\\Avity\\Layouts\\DiagonalMirror::class\r\n]);\r\n```\r\n\r\n# Styles\r\n`Style` objects use `Layout` objects to draw the grid onto a canvas.\r\nAvity comes with 4 built in `Style` classes:\r\n\r\n- `\\Hedronium\\Avity\\Styles\\Square` (_default_)\r\n- `\\Hedronium\\Avity\\Styles\\SquareCircle`\r\n- `\\Hedronium\\Avity\\Styles\\Circle`\r\n- `\\Hedronium\\Avity\\Styles\\Triangle`\r\n\r\n![Avity](http://hedronium.github.io/Avity/images/vertical_mirror.jpeg)\r\n![Avity](http://hedronium.github.io/Avity/images/circle.jpeg)\r\n\r\nchanging the style class\r\n\r\n```PHP\r\n$avity = Avity::init([\r\n    'layout' => \\Hedronium\\Avity\\Styles\\Triangle::class\r\n]);\r\n```\r\n\r\n## spacing()\r\n![Avity](http://hedronium.github.io/Avity/images/spaced.jpeg)   \r\n\r\nAll built in `Style` classes have a `spacing(_int_ $value)` method that can be\r\nused to set the space between blocks.\r\nLike:\r\n\r\n```PHP\r\n$avity = Avity::init();\r\n$avity->style()->spacing(30);\r\n```\r\n\r\n## variedColor()\r\nThis ones a fun method available to all default `Style` classes. Just call it and see the magic happen.\r\nLike:\r\n\r\n```PHP\r\n$avity = Avity::init();\r\n$avity->style()->variedColor();\r\n```\r\n\r\n# Advanced Customization\r\n## Custom Generator\r\nA generator class should always extend `Hedronium\\Avity\\Generator`\r\nexample:\r\n\r\n```PHP\r\n<?php\r\nuse Hedronium\\Avity\\Generator;\r\n\r\n/**\r\n * A Generator that uses php's `rand()` function.\r\n */\r\nclass YourRandGenerator extends Generator\r\n{\r\n    public function next($x, $y)\r\n    {\r\n        // You could use the $x & $y values to\r\n        // return something specific but usually it souldn't matter.\r\n\r\n        return rand();\r\n    }\r\n}\r\n```\r\n\r\n### Using a custom generator\r\n```PHP\r\n$avity = Avity::init([\r\n    'generator' => YourRandGenerator::class\r\n]);\r\n```\r\n\r\nTake construction into your own hands.\r\n\r\n```PHP\r\n$avity = Avity::init([\r\n    'generator' => function () {\r\n        return new YourRandGenerator('Please be very random.');\r\n    }\r\n]);\r\n```\r\n\r\n## Custom Layouts\r\nA generator class should always extend `Hedronium\\Avity\\Layout`\r\n\r\n```PHP\r\n<?php\r\nuse Hedronium\\Avity\\Layout;\r\n\r\n/**\r\n * A Generator that uses php's `rand()` function.\r\n */\r\nclass NoMirror extends Layout\r\n{\r\n    public function drawGrid(array $values)\r\n    {\r\n        // Sometimes, some style objects are not binary\r\n        // they may draw more than one shape of block\r\n        // thus the `$values` variable is passed in by the style.\r\n\r\n        $grid = [];\r\n        for ($y = 0; $y < $this->rows; $y++) {\r\n            $grid[$y] = [];\r\n\r\n            for ($x = 0; $x < $this->columns; $x++) {\r\n\r\n                // should draw takes the `$values` and\r\n                // returns a value based on\r\n                // generator output\r\n\r\n                $grid[$y][$x] = $this->shouldDraw($values);\r\n            }\r\n        }\r\n\r\n        return $grid;\r\n    }\r\n}\r\n```\r\n\r\nPlease check the source code for more details. (We promise its simple and readable.)\r\n\r\n### Using a custom layout\r\n```PHP\r\n$avity = Avity::init([\r\n    'generator' => NoMirror::class\r\n]);\r\n```\r\n\r\ntake construction into your own hands.\r\n\r\n```PHP\r\n$avity = Avity::init([\r\n    'generator' => function ($generator) {\r\n        return new NoMirror($generator, 'POTATO');\r\n    }\r\n]);\r\n```\r\n\r\nthe callback receive the generator instance as it's very likely that you\r\nwill be generating the grid based on the generaotr output.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}